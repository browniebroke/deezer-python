[tool.poetry]
name = "deezer-python"
version = "6.1.1"
description = "A friendly wrapper library for the Deezer API"
authors = ["Bruno Alla <alla.brunoo@gmail.com>"]
license = "MIT"
readme = "README.md"
keywords = ["deezer", "sdk", "client", "requests"]
repository = "https://github.com/browniebroke/deezer-python"
documentation = "https://deezer-python.readthedocs.io"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries",
    "Programming Language :: Python :: 3.12",
]
packages = [
    { include = "deezer", from = "src" },
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/browniebroke/deezer-python/issues"
"Changelog" = "https://deezer-python.readthedocs.io/en/latest/changelog.html"
"Twitter" = "https://twitter.com/_BrunoAlla"
"Mastodon" = "https://fosstodon.org/@browniebroke"

[tool.poetry.dependencies]
python = "^3.8"
requests = ">=2.18"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
myst-parser = ">=0.16"
sphinx = ">=4.0"
sphinx-autobuild = ">=2021.0"
furo = ">=2023.5.20"

[tool.poetry.group.dev.dependencies]
coverage = "^7.0"
environs = "^9.3"
pytest = "^7.0"
pytest-cov = "^4.0"
pytest-mock = "^3.6"
pytest-vcr = "^1.0"
vcrpy = "^5.0.0"
deezer-oauth-cli = "^1.0.0"

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
    "src/deezer/__init__.py:__version__",
]
branch = "main"
build_command = "pip install poetry && poetry build"

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "chore*",
    "ci*",
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.pytest.ini_options]
addopts = "-v -Wdefault --cov=deezer"
pythonpath = ["src"]

[tool.coverage.run]
branch = true
source = ["deezer"]

[tool.coverage.report]
ignore_errors = true
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING",
    "raise NotImplementedError",
]

[tool.ruff]
target-version = "py38"
line-length = 120
ignore = [
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in `__init__`
    "D401", # First line of docstring should be in imperative mood
]
select = [
    "B",   # flake8-bugbear
    "D",   # flake8-docstrings
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit
    "F",   # pyflake
    "E",   # pycodestyle
    "W",   # pycodestyle
    "UP",  # pyupgrade
    "I",   # isort
    "RUF", # ruff specific
]

[tool.ruff.per-file-ignores]
"tests/**/*" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "S101",
]
"setup.py" = ["D100"]
"conftest.py" = ["D100"]
"docs/conf.py" = ["D100"]

[tool.ruff.isort]
known-first-party = ["deezer"]

[tool.mypy]
# suppress errors about unsatisfied imports
ignore_missing_imports = true

no_implicit_optional = true

# ensure all execution paths are returning
warn_no_return = true

show_error_codes = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
